{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","undefined","Box","position","args","color","speed","mesh","useRef","useFrame","current","rotation","x","y","castShadow","ref","attach","MeshWobbleMaterial","factor","App","shadowMap","colorManagement","camera","fov","intensity","shadowMapHeight","shadowMapWidth","shadowCameraFar","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","receiveShadow","Math","PI","opacity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAKAA,iBAAYC,GAEZ,IAAMC,EAAM,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAuB,IAAhBC,aAAgB,MAAR,EAAQ,EAC9CC,EAAOC,iBAAO,MAEpB,OADAC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAE7D,uBAAMC,YAAU,EAACX,SAAaA,EAAWY,IAAQR,EAAjD,UACE,mCAAmBS,OAAS,WAAWZ,KAASA,IAChD,cAACa,EAAA,EAAD,CACID,OAAS,WACTX,MAAUA,EACVC,MAAOA,EACPY,OAAQ,UA6CTC,MAvCf,WACE,OACE,mCACE,eAAC,IAAD,CACIC,WAAS,EACTC,iBAAe,EACfC,OAAU,CAAEnB,SAAU,EAAE,EAAG,EAAG,IAAKoB,IAAI,IAH3C,UAKE,8BAAcC,UAAW,KACzB,kCACIV,YAAU,EACVX,SAAY,CAAC,EAAG,GAAI,GACpBqB,UAAW,IACXC,gBAAiB,KACjBC,eAAgB,KAChBC,gBAAiB,GACjBC,kBAAmB,GACnBC,kBAAmB,GACnBC,gBAAiB,GACjBC,oBAAqB,KAEzB,4BAAY5B,SAAY,EAAE,GAAI,GAAI,IAAKqB,UAAW,KAClD,4BAAYrB,SAAY,CAAC,GAAI,GAAI,GAAIqB,UAAW,KAChD,kCACE,uBAAMQ,eAAa,EAACrB,SAAU,EAAEsB,KAAKC,GAAG,EAAG,EAAG,GAAI/B,SAAU,CAAC,GAAG,EAAE,GAAlE,UACE,qCAAqBa,OAAS,WAAWZ,KAAQ,CAAC,IAAK,OACvD,gCAAgBY,OAAO,WAAWmB,QAAS,SAE7C,cAAC,EAAD,CAAKhC,SAAU,CAAC,EAAE,EAAE,GAAIC,KAAM,CAAC,EAAE,EAAE,GAAIE,MAAO,IAC9C,cAAC,EAAD,CAAKH,SAAU,EAAE,EAAE,GAAG,GAAIE,MAAM,OAAOC,MAAO,IAC9C,cAAC,EAAD,CAAKH,SAAU,CAAC,EAAE,GAAG,GAAIE,MAAM,OAAOC,MAAO,OAG/C,cAAC8B,EAAA,EAAD,UC5COC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0cdaf948.chunk.js","sourcesContent":["import React, {useRef} from \"react\";\nimport './App.scss';\nimport {Canvas, useFrame} from \"react-three-fiber\"\nimport {softShadows, MeshWobbleMaterial, OrbitControls} from \"drei\";\n\nsoftShadows(undefined);\n\nconst Box = ({ position, args, color, speed = 1 }) => {\n  const mesh = useRef(null)\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01 ))\n  return (\n          <mesh castShadow position = { position } ref = { mesh }>\n            <boxBufferGeometry attach = \"geometry\" args = { args }/>\n            <MeshWobbleMaterial\n                attach = \"material\"\n                color = { color }\n                speed={speed}\n                factor={0.66}\n            />\n          </mesh>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      <Canvas\n          shadowMap\n          colorManagement\n          camera = {{ position: [-5, 2, 10], fov:60 }}\n      >\n        <ambientLight intensity={0.3}/>\n        <directionalLight\n            castShadow\n            position = {[0, 10, 0]}\n            intensity={1.3}\n            shadowMapHeight={1024}\n            shadowMapWidth={1024}\n            shadowCameraFar={50}\n            shadowCameraLeft={-10}\n            shadowCameraRight={10}\n            shadowCameraTop={10}\n            shadowCameraBottom={-10}\n        />\n        <pointLight position = {[-10, 0, -20]} intensity={0.7}/>\n        <pointLight position = {[0, -10, 0]} intensity={0.3}/>\n        <group>\n          <mesh receiveShadow rotation={[-Math.PI/2, 0, 0]} position={[0,-3,0]}>\n            <planeBufferGeometry attach = 'geometry' args = {[100, 100]}/>\n            <shadowMaterial attach='material' opacity={0.25}/>\n          </mesh>\n          <Box position={[0,1,0]} args={[3,2,1]} speed={1}/>\n          <Box position={[-2,1,-5]} color=\"pink\" speed={3}/>\n          <Box position={[5,1,-2]} color=\"blue\" speed={3}/>\n        </group>\n\n        <OrbitControls/>\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}